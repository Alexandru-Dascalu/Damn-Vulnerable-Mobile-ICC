package uk.ac.swansea.dascalu.dvmicc.home

import android.app.Activity
import android.content.Intent
import android.os.Bundle
import android.view.Menu
import android.view.MenuItem
import androidx.appcompat.app.AppCompatActivity
import com.google.android.material.appbar.MaterialToolbar

import uk.ac.swansea.dascalu.dvmicc.home.fragments.challenge.ChallengeInformationFragment
import uk.ac.swansea.dascalu.dvmicc.home.model.ChallengeViewModel
import uk.ac.swansea.dascalu.dvmicc.home.model.OperationMode

class MakeOwnMalwareChallengeActivity : AppCompatActivity() {
    companion object {
        private val SETTINGS_REQUEST_CODE = 5
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_challenge_make_own_malware)

        val appBar : MaterialToolbar = findViewById<MaterialToolbar>(R.id.makeOwnMalwareChallengeActivityToolbar)
        setSupportActionBar(appBar)

        title = resources.getStringArray(R.array.challenges)[
                ChallengeViewModel.instance.challenge.challengeNameIndex]

        setFragment()
    }

    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        menuInflater.inflate(R.menu.make_own_malware_app_bar, menu)
        return super.onCreateOptionsMenu(menu)
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        if(item.itemId == R.id.settingsButton) {
            val intent = Intent(this, ChallengeSettingsActivity::class.java)
            intent.putExtra("launchedFromChallengeActivity", true)
            intent.putExtra("mode", OperationMode.MAKE_OWN_MALWARE)

            startActivityForResult(intent, SETTINGS_REQUEST_CODE)
            return true
        } else if(item.itemId == R.id.helpButton) {
            val intent = Intent(this, SecurityLevelsExplanationActivity::class.java)
            intent.putExtra("mode", OperationMode.MAKE_OWN_MALWARE)
            startActivity(intent)
            return true
        } else {
            return super.onOptionsItemSelected(item)
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        if(resultCode == Activity.RESULT_OK && requestCode == SETTINGS_REQUEST_CODE) {
            val newOperationMode : OperationMode? = data?.getSerializableExtra("mode") as OperationMode?

            if (newOperationMode != null && newOperationMode != OperationMode.MAKE_OWN_MALWARE) {
                val intent = Intent(this, ChallengeActivity::class.java)
                intent.putExtra("mode", newOperationMode)

                startActivity(intent)
                finish()
            }
        }
    }

    private fun setFragment() {
        val fragmentTransaction = supportFragmentManager.beginTransaction()
        val fragment = ChallengeInformationFragment(ChallengeViewModel.instance.challenge.challengeNameIndex,
                ChallengeViewModel.instance.challenge.attackExplanation)

        fragmentTransaction.replace(R.id.makeOwnMalwareFrameContainer, fragment, "info")
        fragmentTransaction.commit()
    }
}
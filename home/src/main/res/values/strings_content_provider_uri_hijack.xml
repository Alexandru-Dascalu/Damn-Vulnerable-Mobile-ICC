<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:tools="http://schemas.android.com/tools" tools:ignore="TypographyEllipsis">
    <string name="contentProviderHijackingExplanation">
        We have discussed that intents can transmit data using a URI. These URIs can point to data
        stored in a Content Provider. We have also explained that permissions can be set on a
        per component basis. However, when declaring a Content Provider in the manifest file, the
        developer can set the android:grantUriPermissions tag of the &lt;provider&gt; element to true. This
        means that the content provider can allow temporary access to data linked to in a URI for a
        component that does not otherwise have the permission required by the provider.

        \n\nIn order to do this, the intent that transmits the URI link must have the
        FLAG_GRANT_READ_URI_PERMISSION or FLAG_GRANT_WRITE_URI_PERMISSION flags added to it. If this
        intent is an implicit intent and is intercepted by a malicious component, then that component
        can read the data and perhaps modify it. This attack can put private information, such as debit
        card information or a phone number, in the hands of attackers.

        \n\nTherefore, external apps can access the content provider, even if that app does not
        normally have the permission to do so that the provider declares. Moreover, the provider
        could be declared as not exported and thus not accessible to external apps, but an intent
        with temporary permission flags would still enable external apps to access the provider.

        \n\nYou can go and look at the Android documentation for further details:
        https://developer.android.com/guide/topics/providers/content-provider-creating#implementing-permissions .
    </string>

    <string name="whatsappAppName">Whatsapp</string>
    <string name="smsMessagesAppName">Messages</string>

    <string-array name="providerHijackFlags">
        <item>This is where the fun begins</item>
        <item>General Grievous, you are shorter than I expected</item>
        <item>Can\'t touch this!</item>
    </string-array>

    <string name="providerHijackLowDescription">
        Intents that contain URIs to data in a content provider that should remain private are sent
        as implicit intents. The provider is not exported, however it has temporary permissions
        enabled. Intents pointing to data in the provider have the FLAG_GRANT_READ_URI_PERMISSION
        and FLAG_GRANT_WRITE_URI_PERMISSION added.
    </string>
    <string name="providerHijackHighDescription">
        Intents that contain URIs to data in a content provider that should remain private are sent
        as implicit intents. The provider is not exported and has not enabled temporary permissions
        overall.

        \n\nHowever, temporary permissions are enabled only for a specific path in the provider.
        Although the rest of the data in the provider is now secure and can not be accessed by other
        apps, intents pointing to data in this path can be accessed with a temporary permission,
        and can be intercepted by malware.

        \n\nNOTE: The intent sending code for this level is the same as for the Low level.
    </string>
    <string name="providerHijackImpossibleDescription">
        Intents that contain URIs to data in a content provider that should remain private are sent
        as explicit intents. Malicious apps can not intercept these intents.

        \n\nConsequently,
        temporary permissions to access the private content provider are not given to the malware,
        as without an intent with a URI to the provider and temporary access flags, the malware
        will be refused access.
    </string>

    <string name="whatsappLowManifest">
        <![CDATA[
        <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"
            \n\tpackage=\"uk.ac.swansea.dascalu.dvmicc.whatsapp\">

            \n\n\t<uses-permission android:name=
                \n\t\t\"android.permission.WRITE_EXTERNAL_STORAGE\"/>
            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.CAMERA\"/>
            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.RECORD_AUDIO\"/>
            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.WRITE_CONTACTS\"/>
            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.ACCESS_FINE_LOCATION\" />
            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.INTERNET\" />

            \n\n\t<application
                \n\t\tandroid:allowBackup=\"true\"
                \n\t\tandroid:icon=\"@mipmap/ic_launcher\"
                \n\t\tandroid:label=\"@string/app_name\"
                \n\t\tandroid:roundIcon=\"@mipmap/ic_launcher_round\"
                \n\t\tandroid:supportsRtl=\"true\"
                \n\t\tandroid:theme=\"@style/Theme.DamnVulnerableMobileICC\">

                \n\n\t\t<activity android:name=\".MainActivity\">
                    \n\t\t\t<intent-filter>
                        \n\t\t\t\t<action android:name=\"android.intent.action.MAIN\" />
                        \n\t\t\t\t<category android:name=\"android.intent.category.LAUNCHER\" />
                    \n\t\t\t</intent-filter>
                \n\t\t</activity>
                \n\t\t<activity android:name=\".DeleteActivity\"/>

                \n\n\t\t<service android:name=\".icc.DeleteMessagesService\"
                    \n\t\t\tandroid:enabled=\"true\"
                    \n\t\t\tandroid:exported=\"false\">

                    \n\n\t\t\t<intent-filter>
                        \n\t\t\t\t<action android:name=
                            \n\t\t\t\t\t\"uk.ac.swansea.dascalu.dvmicc.whatsapp.intent.action.DELETE\" />
                        \n\t\t\t\t<category android:name=\"android.intent.category.DEFAULT\" />
                        \n\t\t\t\t<category android:name=\"android.intent.category.APP_CONTACTS\"/>
                        \n\t\t\t\t<data android:mimeType=\"text/plain\"
                            \n\t\t\t\t\tandroid:scheme=\"content\"
                            \n\t\t\t\t\tandroid:host=\"uk.ac.swansea.dascalu.dvmicc.whatsapp.provider\"/>
                    \n\t\t\t</intent-filter>
                \n\t\t</service>

                \n\n\t\t<provider
                    \n\t\t\tandroid:authorities=
                        \n\t\t\t\t\"uk.ac.swansea.dascalu.dvmicc.whatsapp.provider\"
                    \n\t\t\tandroid:name=\".icc.MessagesProvider\"
                    \n\t\t\tandroid:grantUriPermissions=\"true\"
                    \n\t\t\tandroid:enabled=\"true\"
                    \n\t\t\tandroid:exported=\"false\"
                    \n\t\t\tandroid:label=\"Whatsapp messages content provider\"/>
            \n\t</application>
        \n</manifest>]]>
    </string>
    <string name="whatsappHighManifest">
        <![CDATA[
        <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"
            \n\tpackage=\"uk.ac.swansea.dascalu.dvmicc.whatsapp\">

            \n\n\t<uses-permission android:name=
                \n\t\t\"android.permission.WRITE_EXTERNAL_STORAGE\"/>
            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.CAMERA\"/>
            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.RECORD_AUDIO\"/>
            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.WRITE_CONTACTS\"/>
            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.ACCESS_FINE_LOCATION\" />
            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.INTERNET\" />

            \n\n\t<application
                \n\t\tandroid:allowBackup=\"true\"
                \n\t\tandroid:icon=\"@mipmap/ic_launcher\"
                \n\t\tandroid:label=\"@string/app_name\"
                \n\t\tandroid:roundIcon=\"@mipmap/ic_launcher_round\"
                \n\t\tandroid:supportsRtl=\"true\"
                \n\t\tandroid:theme=\"@style/Theme.DamnVulnerableMobileICC\">

                \n\n\t\t<activity android:name=\".MainActivity\">
                    \n\t\t\t<intent-filter>
                        \n\t\t\t\t<action android:name=\"android.intent.action.MAIN\" />
                        \n\t\t\t\t<category android:name=\"android.intent.category.LAUNCHER\" />
                    \n\t\t\t</intent-filter>
                \n\t\t</activity>
                \n\t\t<activity android:name=\".DeleteActivity\"/>

                \n\n\t\t<service android:name=\".icc.DeleteMessagesService\"
                    \n\t\t\tandroid:enabled=\"true\"
                    \n\t\t\tandroid:exported=\"false\">

                    \n\n\t\t\t<intent-filter>
                        \n\t\t\t\t<action android:name=
                            \n\t\t\t\t\t\"uk.ac.swansea.dascalu.dvmicc.whatsapp.intent.action.DELETE\" />
                        \n\t\t\t\t<category android:name=\"android.intent.category.DEFAULT\" />
                        \n\t\t\t\t<category android:name=\"android.intent.category.APP_CONTACTS\"/>
                        \n\t\t\t\t<data android:mimeType=\"text/plain\"
                            \n\t\t\t\t\tandroid:scheme=\"content\"
                            \n\t\t\t\t\tandroid:host=\"uk.ac.swansea.dascalu.dvmicc.whatsapp.provider\"/>
                    \n\t\t\t</intent-filter>
                \n\t\t</service>

                \n\n\t\t<provider
                    \n\t\t\tandroid:authorities=
                        \n\t\t\t\t\"uk.ac.swansea.dascalu.dvmicc.whatsapp.provider\"
                    \n\t\t\tandroid:name=\".icc.MessagesProviderHigh\"
                    \n\t\t\tandroid:grantUriPermissions=\"false\"
                    \n\t\t\tandroid:enabled=\"true\"
                    \n\t\t\tandroid:exported=\"false\"
                    \n\t\t\tandroid:label=\"Whatsapp messages content provider\">

                    \n\n\t\t\t<grant-uri-permission android:pathPrefix=\"/chats/\"/>
                \n\t\t</provider>
            \n\t</application>
        \n</manifest>]]>
    </string>

    <string name="whatsappLowIntentCode" >
        <![CDATA[
        class DeleteActivity : AppCompatActivity() {
            \n\t...
            \n\toverride fun onOptionsItemSelected(item: MenuItem): Boolean {
                \n\t\twhen(item.itemId) {
                    \n\t\t\tR.id.delete_chats_button -> {
                        \n\t\t\t\t...
                        \n\t\t\t\tfinish(chatNamesToDelete)
                    \n\t\t\t}
                \n\t\t}
            \n\t}

            \n\n\tprivate fun finish(chatNamesToDelete: HashSet<String>) {
                \n\t\tval resultIntent = Intent()
                \n\t\tresultIntent.action =
                    \n\t\t\t\"uk.ac.swansea.dascalu.dvmicc.whatsapp.intent.action.DELETE\"
                \n\t\tresultIntent.addCategory(Intent.CATEGORY_APP_CONTACTS)

                \n\n\t\tresultIntent.putExtra(\"chatNamesToDelete\", chatNamesToDelete)
                \n\t\tresultIntent.setDataAndType(MessagesProvider.CHATS_URI, \"text/plain\")
                \n\t\tresultIntent.flags = Intent.FLAG_GRANT_READ_URI_PERMISSION or
                    \n\t\t\tIntent.FLAG_GRANT_WRITE_URI_PERMISSION

                \n\n\t\tstartService(resultIntent)
                \n\t\tfinish()
            \n\t}
        \n}]]>
    </string>

    <string name="whatsappImpossibleIntentCode">
       <![CDATA[
        class DeleteActivity : AppCompatActivity() {
            \n\t...
            \n\toverride fun onOptionsItemSelected(item: MenuItem): Boolean {
                \n\t\twhen(item.itemId) {
                    \n\t\t\tR.id.delete_chats_button -> {
                        \n\t\t\t\t...
                        \n\t\t\t\tfinish(chatNamesToDelete)
                    \n\t\t\t}
                \n\t\t}
            \n\t}

            \n\n\tprivate fun finish(chatNamesToDelete: HashSet<String>) {
                \n\t\tval resultIntent = Intent(this, DeleteMessagesService::class.java)

                \n\n\t\tresultIntent.putExtra("chatNamesToDelete", chatNamesToDelete)
                \n\t\tresultIntent.setDataAndType(MessagesProvider.CHATS_URI, "text/plain")
                \n\t\tresultIntent.flags = Intent.FLAG_GRANT_READ_URI_PERMISSION or
                    \n\t\t\tIntent.FLAG_GRANT_WRITE_URI_PERMISSION

                \n\n\t\tstartService(resultIntent)
                \n\t\tfinish()
            \n\t}
        \n}]]>
    </string>

    <string name="whatsappMainActivityIntentCode">
        <![CDATA[
        class MainActivity : AppCompatActivity() {
            \n\t...
            \n\toverride fun onOptionsItemSelected(item: MenuItem): Boolean {
                \n\t\twhen(item.itemId) {
                    \n\t\t\tR.id.delete_activity_button -> {
                        \n\t\t\t\tval intent = Intent(this, DeleteActivity::class.java)
                        \n\t\t\t\tstartActivity(intent)
                        \n\t\t\t\treturn true
                    \n\t\t\t}
                    \n\t\t\t...
                \n\t\t}
            \n\t}
        \n}]]>
    </string>

    <string name="messagesManifest">
        <![CDATA[
        <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"
            \n\tpackage=\"uk.ac.swansea.dascalu.dvmicc.messages\">

            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.READ_EXTERNAL_STORAGE\"/>
            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.INTERNET\"/>
            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.READ_SMS\"/>
            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.SEND_SMS\"/>
            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.RECEIVE_WAP_PUSH\"/>
            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.RECEIVE_SMS\"/>

            \n\n\t<application
                \n\t\tandroid:allowBackup=\"true\"
                \n\t\tandroid:icon=\"@mipmap/ic_launcher\"
                \n\t\tandroid:label=\"@string/app_name\"
                \n\t\tandroid:roundIcon=\"@mipmap/ic_launcher_round\"
                \n\t\tandroid:supportsRtl=\"true\"
                \n\t\tandroid:theme=\"@style/Theme.DamnVulnerableMobileICC\">

                \n\n\t\t<activity android:name=\".MainActivity\">
                    \n\t\t\t<intent-filter>
                        \n\t\t\t\t<action android:name=\"android.intent.action.MAIN\" />
                        \n\t\t\t\t<category android:name=\"android.intent.category.LAUNCHER\" />
                    \n\t\t\t</intent-filter>
                \n\t\t</activity>
                \n\t\t<activity android:name=\".LogActivity\"/>

                \n\n\t\t<service android:name=\".icc.MessagesService\"
                    \n\t\t\tandroid:enabled=\"true\"
                    \n\t\t\tandroid:exported=\"true\">

                    \n\t\t\t<intent-filter>
                        \n\t\t\t\t<action android:name=
                            \n\t\t\t\t\t\"uk.ac.swansea.dascalu.dvmicc.whatsapp.intent.action.DELETE\" />
                        \n\t\t\t\t<category android:name=\"android.intent.category.DEFAULT\" />
                        \n\t\t\t\t<category android:name=\"android.intent.category.APP_CONTACTS\"/>
                        \n\t\t\t\t<data android:mimeType=\"text/plain\"
                            \n\t\t\t\t\tandroid:scheme=\"content\"
                            \n\t\t\t\t\tandroid:host=\"uk.ac.swansea.dascalu.dvmicc.whatsapp.provider\"/>
                    \n\t\t\t</intent-filter>
                \n\t\t</service>
            \n\t</application>
        \n</manifest>]]>
    </string>

    <string name="messagesMainActivityIntentCode">
        <![CDATA[
        class MainActivity : AppCompatActivity() {
            \n\t...
            \n\toverride fun onOptionsItemSelected(item: MenuItem): Boolean {
                \n\t\twhen (item.itemId) {
                    \n\t\t\tR.id.log_button -> {
                        \n\t\t\t\tval intent = Intent(this, LogActivity::class.java)
                        \n\t\t\t\tstartActivity(intent)
                        \n\t\t\t\treturn true
                    \n\t\t\t}
                    \n\t\t\t...
                \n\t\t}
            \n\t}
        \n}]]>
    </string>

    <string name="contentProviderHijackInstructions">
        Go to the Whatsapp app and look around. This app lets you view your chats, and you can also
        delete an entire chat. Press on the bin icon to go the remove chats screen, and select what
        chats to remove. To make the deleted chats appear again, close the app and restart it.

        \n\nGo and take a look at the Messages app as well.

        \n\nWhen the malware overcome mode is enabled, you should see that the selected chats in
        Whatsapp are not deleted. Then you should look in the log of the Messages app and see
        what you find. Repeat this for all security levels. Clear the log between security levels.
    </string>

    <string name="contentProviderHijackScenarioConclusion">
        This challenge showed you how apps can give temporary read or write permissions through an
        intent to whatever component receives that intent. If that intent falls into the wrong hands,
        the malware can bypass permission requirements set by the content provider in its manifest,
        or can even access an un-exported provider.

        \n\nIn this scenario, the Whatsapp app uses a content provider as an interface for storing the
        messages. After you select some chats to delete and press the delete icon, the Delete Chats
        activty sends an intent to a service in the Whatsapp app and then closes. This service is
        responsible for deleting the messages from the database in the background. The intent
        contains the selection of chats to delete, a uri to where the chats are stored in the
        content provider, and temporary access flags.

        \n\nBecause this intent is sent implicitly, it can be intercepted by malicious components. The
        malware app contains a service with an intent filter identical to that of the service from
        the Whatsapp app. The malicious service will get the intent, and because the intent has
        temporary access flags, the malicious service can query the Whatsapp content provider and
        get data out of it.

        \n\nAdmittedly, this scenario is not very authentic. There is no good reason the Delete
        activity would not delete the selected chats itself and need to hand that responsibility
        over to the a service. This challenge was implemented like this due to time constraints.
        A more authentic use case for temporary content provider permissions
        would be for storing images or file attachments in a messaging app like Whatsapp. When viewing an
        image or a document, Whatsapp would want to enable other apps to access the content, perhaps
        because Whatspp itself can not open those documents. An activity in Whatspp would make an
        implicit intent that contains a URI to that document and has temporary read or write flags,
        and would sent this intent. The user can then choose which app should handle this intent,
        which would be able to read that document from Whatsapp\'s provider. This example is given
        by the Android documentation: https://developer.android.com/guide/topics/providers/content-provider-creating#implementing-permissions .

        \n\nThe way this challenge has been implemented makes this attack a Service Intent Hijack
        as well, since the implicit intent with the URI to the provider is sent to a service, and a
        malicious service receives the intent instead. However, this attack is very unlikely. Since
        API 21 (Android 5.0), implicit intents can not be used to start a service. If you call
        startService with an implicit intent, it will throw an exception. This only applies if your
        app targets API 21 or newer, which is the reason why the Whatsapp app targets API 21 and
        not 25 like the other apps in this project. Since Google Play forces new apps or app updates
        to target API level 28 or more, it is impossible for a new malware exploiting the Service
        Intent Hijack vulnerability to be published. Therefore, the threat of this type of attack is
        low, though malwares could be distributed through other platforms which do not enforce these
        requirements.

        \n\nYou can read a very good explanation of all the ways to secure Content Providers here:
        https://www.oreilly.com/library/view/application-security-for/9781449322250/ch04.html .
    </string>
</resources>
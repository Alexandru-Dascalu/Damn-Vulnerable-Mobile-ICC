<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:tools="http://schemas.android.com/tools" tools:ignore="TypographyEllipsis">

    <string name="newsAggregatorAppName">News Aggregator</string>
    <string name="callLoggerAppName">Call Logger</string>
    <!--attack explanations-->
    <string name="broadcastTheftExplanation">
        When a broadcast is sent, the sender does not receive any indication of what components have
        received that broadcast, and receivers can read all the data inside the broadcast intent.

        \n\nTherefore, a malicious app could register a broadcast receiver with as many intent
        filters as possible to receive the maximum number of broadcasts. The malware would be able
        to read the data in the broadcast without the user knowing it. If the app has the permission
        to access the internet, it could be used as spyware.

        \n\nBesides intercepting information meant to be public, it could read sensitive data
        mistakenly placed in a public broadcast by an app. Moreover, if an implicit intent is used
        for a broadcast meant for an app\â€™s internal use, that broadcast will be sent to any receiver
        on the device with a matching filter. Sensitive user information could thus be intercepted
        and sent to the attacker.

        \n\nWhen making a broadcast, the developer can specify the permission that a broadcast
        receiver needs to have to receive the intent. This can be used to guard against
        Broadcast Theft. But the malware could still get the permission. Even if the permission is a
        Signature one, the attacker could get it if they have stolen the developer\'s certificate.
        Other ways for a developer to guard against these attacks is to not put sensitive
        information in a broadcast unless necessary, to use explicit broadcasts for intra-app
        use or to send broadcast using LocalBroadcastManager. Alternatively, they could not rely on
        public broadcast and use one of the newer Android APIs to achieve their goal.
    </string>

    <string name="broadcastTheftInstructions">
        Go to the News Aggregator app and log in with email test@gmail.com and password Test1234,
        or make your own account. Look at some of the news streams (You will only have All and
        Recommended if you made your own account). If you have looked at them before, swipe down to
        refresh to get the latest articles. The app has a bug where sometimes articles do not
        appear, so you need to swipe down to refresh in that case.

        \n\nThen, go and start the Call Logger app.
        Have a look at the your call history in the three tabs. Then click on the overflow menu on
        the app bar and click on Log, where you can look for flags and the stolen data.
        Do this for all security levels to find the flags.

        \n\nFor security Levels Medium and Very High, you will need to use Call Logger 2 and Call
        Logger 3, respectively.
        It will be the same malware, but with a slightly different icon and it will have the appropriate
        permission for those security levels (it is implemented like this because normal and signature
        level permissions are granted when app is installed and can not be changed after).

        \n\n Call Logger 2 and 3 will also be able to read the news broadcasts when the security
        level is low. You may want to clear their logs before switching to security level medium or
        very high, respectively.

        \n\nWhen the malware is in security level High, you need to first start the Call Logger app
        before going into the News Aggregator to get news stories.

        \n\nNOTE: When the attack succeeds, you may see multiple stolen JSON news streams in the
        log besides the one you clicked on.
        This is because the News Aggregator app may load multiple streams when you click on a
        different news stream tab.
    </string>

    <string-array name="broadcastTheftFlags">
        <item>Alea iacta est</item>
        <item>Veni, vidi, vici</item>
        <item>Et tu, Brute?</item>
        <item>Galia est omnis divisa in partes tres</item>
    </string-array>

    <!--security level descriptions-->
    <string name="broadcastTheftLowDescription">
        Broadcasts meant for intra-app use are sent without permission protection and by using
        Context.sendBroadcast().
    </string>
    <string name="broadcastTheftMediumDescription">
        Broadcast for intra-app use is protected by a custom permission and sent using
        Context.sendBroadcast(). However, the permission has no protection level set and is thus
        normal by default. The OS thus grants it automatically,
    </string>
    <string name="broadcastTheftHighDescription">
        Broadcast for intr-app use is protected by a custom permission and is sent using
        Context.sendBroadcast. This permission\'s protection level is dangerous, but a careless user
        might still grant it.
    </string>
    <string name="broadcastTheftVeryHighDescription">
        Broadcast for intr-app use is protected by a signature permission is sent using
        Context.sendBroadcast. If the attacker gets the certificate of the developer, they can get
        this permission.
    </string>
    <string name="broadcastTheftImpossibleDescription">
        Broadcasts are sent using LocalBroadcastManager, or an equivalent, since
        LocalBroadcastManager is deprecated. Alternatively, address the broadcast to the receiver
        inside your app explicitly. Or restrict broadcast to receivers of a certain package.
        The latter is what the News Aggregator does.
    </string>

    <!--News aggregator manifests-->
    <string name="newsAggregatorLowManifest">
        <![CDATA[
        <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"
            \n\tpackage=\"uk.ac.swansea.dascalu.dvmicc.newsaggregator\">

            \n\n\t<uses-permission android:name=
                \n\t\t\"android.permission.READ_EXTERNAL_STORAGE\" />
            \n\t\n\t<uses-permission android:name=
                \n\t\t\"android.permission.INTERNET\"/>

            \n\n\t<application
                \n\t\tandroid:allowBackup=\"true\"
                \n\t\tandroid:icon=\"@mipmap/ic_launcher\"
                \n\t\tandroid:label=\"@string/app_name\"
                \n\t\tandroid:roundIcon=\"@mipmap/ic_launcher_round\"
                \n\t\tandroid:supportsRtl=\"true\"
                \n\t\tandroid:hardwareAccelerated=\"false\"
                \n\t\tandroid:theme=\"@style/AppTheme\">

                \n\n\t\t<activity android:name=\".LogInActivity\">
                    \n\t\t\t<intent-filter>
                        \n\t\t\t\t<action android:name=\"android.intent.action.MAIN\" />

                        \n\t\t\t\t<category android:name=\"android.intent.category.LAUNCHER\" />
                    \n\t\t\t</intent-filter>
                \n\t\t</activity>

                \n\n\t\t<activity android:name=\".MainActivity\"/>
                \n\t\t<activity android:name=\".SignUpActivity\"/>
                \n\t\t<activity android:name=\".LoadingActivity\"/>
                \n\t\t<activity android:name=\".FullArticleActivity\"/>
                \n\n\t\t<service android:name=\".icc.NewsService\"
                    \n\t\t\tandroid:exported=\"false\"
                    \n\t\t\tandroid:enabled=\"true\"/>
                \n\n\t\t<receiver android:name=\".icc.NewsBroadcastReceiver\"
                    \n\t\t\tandroid:enabled=\"true\">
                    \n\t\t\t<intent-filter>
                        \n\t\t\t\t<action android:name=
                            \n\t\t\t\t\t\"uk.ac.swansea.dascalu.dvmicc.newsaggregator.broadcast.NEWS_RESULT\"/>
                    \n\t\t\t</intent-filter>
                \n\t\t</receiver>
            \n\n\t</application>
        \n</manifest>]]>
    </string>
    <string name="newsAggregatorMediumManifest">
        <![CDATA[
        <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"
            \n\tpackage=\"uk.ac.swansea.dascalu.dvmicc.newsaggregator\">

            \n\n\t<uses-permission android:name=
                \n\t\t\"android.permission.READ_EXTERNAL_STORAGE\" />
            \n\t\n\t<uses-permission android:name=
                    \n\t\t\"android.permission.INTERNET\"/>

            \n\n\t<permission
                \n\t\tandroid:name=\"uk.ac.swansea.dascalu.dvmicc.newsaggregator.permissions.READ_NEWS\"
                \n\t\tandroid:label=\"@string/readNewsPermissionLabel\"
                \n\t\tandroid:description=\"@string/readNewsPermissionDescription\"/>

            \n\n\t<uses-permission android:name=
                \n\t\t\"uk.ac.swansea.dascalu.dvmicc.newsaggregator.permissions.READ_NEWS\"/>

            \n\n\t<application
                \n\t\tandroid:allowBackup=\"true\"
                \n\t\tandroid:icon=\"@mipmap/ic_launcher\"
                \n\t\tandroid:label=\"@string/app_name\"
                \n\t\tandroid:roundIcon=\"@mipmap/ic_launcher_round\"
                \n\t\tandroid:supportsRtl=\"true\"
                \n\t\tandroid:hardwareAccelerated=\"false\"
                \n\t\tandroid:theme=\"@style/AppTheme\">

                \n\n\t\t<activity android:name=\".LogInActivity\">
                    \n\t\t\t<intent-filter>
                        \n\t\t\t\t<action android:name=\"android.intent.action.MAIN\" />
                        \n\t\t\t\t<category android:name=\"android.intent.category.LAUNCHER\" />
                    \n\t\t\t</intent-filter>
                \n\t\t</activity>

                \n\n\t\t<activity android:name=\".MainActivity\"/>
                \n\t\t<activity android:name=\".SignUpActivity\"/>
                \n\t\t<activity android:name=\".LoadingActivity\"/>
                \n\t\t<activity android:name=\".FullArticleActivity\"/>
                \n\n\t\t<service android:name=\".icc.NewsService\"
                    \n\t\t\tandroid:exported=\"false\"
                    \n\t\t\tandroid:enabled=\"true\"/>
                \n\n\t\t<receiver android:name=\".icc.NewsBroadcastReceiver\"
                    \n\t\t\tandroid:enabled=\"true\">
                    \n\t\t\t<intent-filter>
                        \n\t\t\t\t<action android:name=
                            \n\t\t\t\t\t\"uk.ac.swansea.dascalu.dvmicc.newsaggregator.broadcast.NEWS_RESULT\"/>
                    \n\t\t\t</intent-filter>
                \n\t\t</receiver>
            \n\n\t</application>
        \n</manifest>]]>
    </string>

    <string name="newsAggregatorHighManifest">
        <![CDATA[
        <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"
            \n\tpackage=\"uk.ac.swansea.dascalu.dvmicc.newsaggregator\">

            \n\n\t<uses-permission android:name=
                \n\t\t\"android.permission.READ_EXTERNAL_STORAGE\" />
            \n\t\n\t<uses-permission android:name=
                \n\t\t\"android.permission.INTERNET\"/>

            \n\n\t<permission
                \n\t\tandroid:name=\"uk.ac.swansea.dascalu.dvmicc.newsaggregator.permissions.READ_NEWS\"
                \n\t\tandroid:label=\"@string/readNewsPermissionLabel\"
                \n\t\tandroid:description=\"@string/readNewsPermissionDescription\"
                \n\t\tandroid:protectionLevel=\"dangerous\"/>

            \n\n\t<uses-permission android:name=
                \n\t\t\"uk.ac.swansea.dascalu.dvmicc.newsaggregator.permissions.READ_NEWS\"/>

            \n\n\t<application
                \n\t\tandroid:allowBackup=\"true\"
                \n\t\tandroid:icon=\"@mipmap/ic_launcher\"
                \n\t\tandroid:label=\"@string/app_name\"
                \n\t\tandroid:roundIcon=\"@mipmap/ic_launcher_round\"
                \n\t\tandroid:supportsRtl=\"true\"
                \n\t\tandroid:hardwareAccelerated=\"false\"
                \n\t\tandroid:theme=\"@style/AppTheme\">

                \n\n\t\t<activity android:name=\".LogInActivity\">
                    \n\t\t\t<intent-filter>
                        \n\t\t\t\t<action android:name=\"android.intent.action.MAIN\" />
                        \n\t\t\t\t<category android:name=\"android.intent.category.LAUNCHER\" />
                    \n\t\t\t</intent-filter>
                \n\t\t</activity>

                \n\n\t\t<activity android:name=\".MainActivity\"/>
                \n\t\t<activity android:name=\".SignUpActivity\"/>
                \n\t\t<activity android:name=\".LoadingActivity\"/>
                \n\t\t<activity android:name=\".FullArticleActivity\"/>
                \n\n\t\t<service android:name=\".icc.NewsService\"
                    \n\t\t\tandroid:exported=\"false\"
                    \n\t\t\tandroid:enabled=\"true\"/>
                \n\n\t\t<receiver android:name=\".icc.NewsBroadcastReceiver\"
                    \n\t\t\tandroid:enabled=\"true\">
                    \n\t\t\t<intent-filter>
                        \n\t\t\t\t<action android:name=
                            \n\t\t\t\t\t\"uk.ac.swansea.dascalu.dvmicc.newsaggregator.broadcast.NEWS_RESULT\"/>
                    \n\t\t\t</intent-filter>
                \n\t\t</receiver>
            \n\n\t</application>
        \n</manifest>]]>
    </string>
    <string name="newsAggregatorVeryHighManifest">
        <![CDATA[
        <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"
            \n\tpackage=\"uk.ac.swansea.dascalu.dvmicc.newsaggregator\">

            \n\n\t<uses-permission android:name=
                \n\t\t\"android.permission.READ_EXTERNAL_STORAGE\" />
            \n\t<uses-permission android:name=
                \n\t\t\"android.permission.INTERNET\"/>

            \n\n\t<permission
                \n\t\tandroid:name=\"uk.ac.swansea.dascalu.dvmicc.newsaggregator.permissions.READ_NEWS\"
                \n\t\tandroid:label=\"@string/readNewsPermissionLabel\"
                \n\t\tandroid:description=\"@string/readNewsPermissionDescription\"
                \n\t\tandroid:protectionLevel=\"signature\"/>

            \n\n\t<uses-permission android:name=
                \n\t\t\"uk.ac.swansea.dascalu.dvmicc.newsaggregator.permissions.READ_NEWS\"/>

            \n\n\t<application
                \n\t\tandroid:allowBackup=\"true\"
                \n\t\tandroid:icon=\"@mipmap/ic_launcher\"
                \n\t\tandroid:label=\"@string/app_name\"
                \n\t\tandroid:roundIcon=\"@mipmap/ic_launcher_round\"
                \n\t\tandroid:supportsRtl=\"true\"
                \n\t\tandroid:hardwareAccelerated=\"false\"
                \n\t\tandroid:theme=\"@style/AppTheme\">

                \n\n\t\t<activity android:name=\".LogInActivity\">
                    \n\t\t\t<intent-filter>
                        \n\t\t\t\t<action android:name=\"android.intent.action.MAIN\" />

                        \n\t\t\t\t<category android:name=\"android.intent.category.LAUNCHER\" />
                    \n\t\t\t</intent-filter>
                \n\t\t</activity>

                \n\n\t\t<activity android:name=\".MainActivity\"/>
                \n\t\t<activity android:name=\".SignUpActivity\"/>
                \n\t\t<activity android:name=\".LoadingActivity\"/>
                \n\t\t<activity android:name=\".FullArticleActivity\"/>
                \n\n\t\t<service android:name=\".icc.NewsService\"
                    \n\t\t\tandroid:exported=\"false\"
                    \n\t\t\tandroid:enabled=\"true\"/>
                \n\n\t\t<receiver android:name=\".icc.NewsBroadcastReceiver\"
                    \n\t\t\tandroid:enabled=\"true\">
                    \n\t\t\t<intent-filter>
                        \n\t\t\t\t<action android:name=
                            \n\t\t\t\t\t\"uk.ac.swansea.dascalu.dvmicc.newsaggregator.broadcast.NEWS_RESULT\"/>
                    \n\t\t\t</intent-filter>
                \n\t\t</receiver>
            \n\n\t</application>
        \n</manifest>]]>
    </string>

    <string name="newsAggregatorLowIntentCode">
        <![CDATA[
        class NewsService : Service() {
            \n\t...
            \n\tval broadcast = Intent(\"uk.ac.swansea.dascalu.\" +
            \n\t\t\"dvmicc.newsaggregator.broadcast.NEWS_RESULT\")
            \n\tbroadcast.putExtra(\"articles\", articles)
            \n\tbroadcast.putExtra(\"news_stream_name\", newsStreamName)

            \n\n\tsendBroadcast(broadcast)
        \n}]]>
    </string>
    <string name="newsAggregatorMediumIntentCode">
        <![CDATA[
       val broadcast = Intent(\"uk.ac.swansea.dascalu.\" +
            \n\t\"dvmicc.newsaggregator.broadcast.NEWS_RESULT\")
        \nbroadcast.putExtra(\"articles\", articles)
        \nbroadcast.putExtra(\"news_stream_name\", newsStreamName)

        \n\nsendBroadcast(broadcast,\"uk.ac.swansea.dascalu.\" +
            \n\t\"dvmicc.newsaggregator.permissions.READ_NEWS\")]]>
    </string>
    <string name="newsAggregatorImpossibleIntentCode">
        <![CDATA[
        val broadcast = Intent(\"uk.ac.swansea.dascalu.\" +
            \n\t\"dvmicc.newsaggregator.broadcast.NEWS_RESULT\")
        \nbroadcast.putExtra(\"articles\", articles)
        \nbroadcast.putExtra(\"news_stream_name\", newsStreamName)

        \n\nbroadcast.setPackage(this.getPackageName())
        \nsendBroadcast(broadcast)]]>
    </string>

    <string name="newsAggregatorLoginIntentCode" >
        <![CDATA[
        class LogInActivity : AppCompatActivity() {
            \n\t...
            \n\tfun signUp(view: View) {
                \n\t\tval signUpIntent = Intent(this, SignUpActivity::class.java)
                \n\t\tstartActivity(signUpIntent)
            \n\t}

            \n\n\tprivate fun checkLogIn(task: Task<AuthResult>, view: View) {
                \n\t\tif (task.isSuccessful) {
                \n\t\t\tval mainActivityIntent = Intent(this, LoadingActivity::class.java)
                \n\t\t\tstartActivity(mainActivityIntent)
            \n\t\t} else {
            \n\t\t\t...
            \n\t\t}
            \n\t}
            \n...
        \n}]]>
    </string>
    <string name="newsAggregatorSignUpCode">
        <![CDATA[
        class SignUpActivity : AppCompatActivity() {
            \n\t...
            \n\tprivate fun onLogInAfterSignUp(task: Task<AuthResult>) {
                \n\t\tif (task.isSuccessful) {
                \n\t\tval intent: Intent = Intent(this, LoadingActivity::class.java)
                \n\t\tstartActivity(intent)
                \n\t\tthis.finish()
            \n\t}
            \n\t...
        \n}]]>
    </string>
    <string name="newsAggregatorLoadingCode">
        <![CDATA[
        class LoadingActivity: AppCompatActivity(), FirebaseLoadedCallback {
            \n\t...

            \n\toverride fun onLoaded() {
                \n\t\tval intent = Intent(this, MainActivity::class.java)
                \n\t\tstartActivity(intent)
                \n\t\tthis.finish()
            \n\t}
            \n\t...
        \n}]]>
    </string>
    <string name="newsAggregatorArticleIntentCode">
        <![CDATA[
        inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {

        \n\n\tinit {
            \n\t\tcardView.setOnClickListener { _ ->
                \n\t\t\tif(article != null) {
                    \n\t\t\t\tval displayArticleIntent = Intent(bookmarksFragment.context,
                        \n\t\t\t\t\tFullArticleActivity::class.java)
                    \n\t\t\t\tdisplayArticleIntent.putExtra("LINK", article!!.url)

                    \n\t\t\t\tbookmarksFragment.requireContext().startActivity(displayArticleIntent)
                \n\t\t\t}
            \n\t\t}
        \n\t}
        \n}]]>
    </string>

    <string name="callLoggerManifest">
        <![CDATA[
        <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"
            \n\tpackage=\"uk.ac.swansea.dascalu.dvmicc.call_logger\">

            \n\n\t<uses-permission android:name=
                \n\t\t\"android.permission.READ_CALL_LOG\"/>
            \n\t\n\t<uses-permission android:name=
                    \n\t\t\"android.permission.INTERNET\"/>

            \n\n\t<application
                \n\t\tandroid:allowBackup=\"true\"
                \n\t\tandroid:icon=\"@mipmap/ic_launcher\"
                \n\t\tandroid:label=\"@string/app_name\"
                \n\t\tandroid:roundIcon=\"@mipmap/ic_launcher_round\"
                \n\t\tandroid:supportsRtl=\"true\"
                \n\t\tandroid:theme=\"@style/AppTheme\">

                \n\n\t\t<activity android:name=\".MainActivity\">
                    \n\t\t\t<intent-filter>
                        \n\t\t\t\t<action android:name=\"android.intent.action.MAIN\" />

                        \n\t\t\t\t<category android:name=\"android.intent.category.LAUNCHER\" />
                    \n\t\t\t</intent-filter>
                \n\t\t</activity>
                \n\n\t\t<activity android:name=\".LogActivity\"/>

                \n\n\t\t<receiver android:name=\".icc.CallsBroadcastReceiver\"
                    \n\t\t\tandroid:enabled=\"true\">
                    \n\t\t\t<intent-filter>
                        \n\t\t\t\t<action android:name=
                        \n\t\t\t\t\t\"uk.ac.swansea.dascalu.dvmicc.newsaggregator.broadcast.NEWS_RESULT\"/>
                    \n\t\t\t</intent-filter>
                \n\t\t</receiver>
            \n\n\t</application>
        \n</manifest>]]>
    </string>

    <string name="callLoggerIntentCode">
        <![CDATA[
        class MainActivity : AppCompatActivity() {
            \n\t...
            \n\toverride fun onOptionsItemSelected(item: MenuItem): Boolean {
                \n\t\tif(item.itemId == R.id.log_button) {
                \n\n\t\t\tval intent = Intent(this, LogActivity::class.java)
                \n\t\t\tstartActivity(intent)

                \n\n\t\t\treturn true
                \n\t\t}
                \n\t\treturn super.onOptionsItemSelected(item)
            \n\t}
        \n}]]>
    </string>

    <string name="broadcastTheftVulnerabilityCorrectAnswer">NewsService, line 8</string>
    <string-array name="broadcastTheftVulnerabilityQuestionOptions">
        <item>LoginActivity, line 11</item>
        <item>@string/broadcastTheftVulnerabilityCorrectAnswer</item>
        <item>Manifest, line 21</item>
        <item>ViewHolder, line 6</item>
        <item>Manifest, line 38</item>
        <item>NewsService, line 3</item>
        <item>Manifest, line 36</item>
    </string-array>

    <string name="broadcastTheftMalwareGiveawayCorrectAnswer">Manifest, line 31</string>
    <string-array name="broadcastTheftMalwareGiveawayOptions">
        <item>MainActivity, line 6</item>
        <item>Manifest, line 8</item>
        <item>@string/broadcastTheftMalwareGiveawayCorrectAnswer</item>
        <item>Manifest, line 21</item>
        <item>MainActivity, line 7</item>
    </string-array>

    <string name="broadcastTheftScenarioConclusion">
        The News Aggregator app uses a broadcast to signal that it has downloaded the news data.
        In a real world application, one might want to do this using an implicit broadcast in order
        to make the application more loosely coupled, and thus make it more modular and flexible.
        Another reason might be that you want other apps made by you to know when the news
        aggregator has gotten some articles.

        \n\nAttackers can take the APK for the News Aggregator and reverse engineer it to be able
        to see the source code. Thus, they can see the intent filter for the legitimate broadcast
        receiver and they can hide a broadcast receiver with the same intent filter inside their
        own malicious app. If the user has both the news aggregator and the malware installed, the
        malware can listen to broadcast that should be private and can see what news articles a
        user is looking into.

        \n\nThe developer needs to reconsider wether the broadcast should be accessible to other
        apps. Developers can protect their broadcasts with permissions. Dangerous level permissions
        provide good security, but they can still be granted by careless users. Signature level
        permissions offer excellent security, but that security is only as good as how well the
        developer stores their private certificate key. If that gets stolen, the hacker can gain
        access to the broadcast. Setting the package for components that should get the broadcast
        guarantees that only components in the same app will be able to get the broadcast.
    </string>
</resources>